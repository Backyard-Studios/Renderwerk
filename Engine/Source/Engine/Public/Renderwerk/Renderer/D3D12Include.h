#pragma once

#include <d3d12.h>
#include <d3d12sdklayers.h>
#include <dxgi1_6.h>
#include <dxgidebug.h>
#include <wrl.h>
#include <d3dx12/d3dx12.h>

#include "D3D12MemAlloc.h"
#include "d3d12shader.h"
#include "dxcapi.h"

using Microsoft::WRL::ComPtr;

#if RW_CONFIG_DEBUG || RW_CONFIG_DEVELOPMENT
#	define CHECK_RESULT(ResultPredicate, ...) { HRESULT UNIQUE_NAME(Result) = ResultPredicate; if(FAILED(UNIQUE_NAME(Result))) RW_LOG_ERROR("{}", D3D12ResultToString(UNIQUE_NAME(Result))); RW_DEBUG_ASSERT(SUCCEEDED(UNIQUE_NAME(Result)), __VA_ARGS__) }
#else
#	define CHECK_RESULT(Result, ...) Result;
#endif
#define CHECK_RESULT_CRITICAL(Result, ...) { HRESULT UNIQUE_NAME(Result) = ResultPredicate; if(FAILED(UNIQUE_NAME(Result))) RW_LOG_ERROR("{}", D3D12ResultToString(UNIQUE_NAME(Result))); RW_ASSERT_CRITICAL(SUCCEEDED(UNIQUE_NAME(Result)), __VA_ARGS__) }


ENGINE_API INLINE std::string ToString(const D3D_FEATURE_LEVEL FeatureLevel)
{
	switch (FeatureLevel)
	{
	case D3D_FEATURE_LEVEL_1_0_GENERIC: return "D3D_FEATURE_LEVEL_1_0_GENERIC";
	case D3D_FEATURE_LEVEL_1_0_CORE: return "D3D_FEATURE_LEVEL_1_0_CORE";
	case D3D_FEATURE_LEVEL_9_1: return "D3D_FEATURE_LEVEL_9_1";
	case D3D_FEATURE_LEVEL_9_2: return "D3D_FEATURE_LEVEL_9_2";
	case D3D_FEATURE_LEVEL_9_3: return "D3D_FEATURE_LEVEL_9_3";
	case D3D_FEATURE_LEVEL_10_0: return "D3D_FEATURE_LEVEL_10_0";
	case D3D_FEATURE_LEVEL_10_1: return "D3D_FEATURE_LEVEL_10_1";
	case D3D_FEATURE_LEVEL_11_0: return "D3D_FEATURE_LEVEL_11_0";
	case D3D_FEATURE_LEVEL_11_1: return "D3D_FEATURE_LEVEL_11_1";
	case D3D_FEATURE_LEVEL_12_0: return "D3D_FEATURE_LEVEL_12_0";
	case D3D_FEATURE_LEVEL_12_1: return "D3D_FEATURE_LEVEL_12_1";
	case D3D_FEATURE_LEVEL_12_2: return "D3D_FEATURE_LEVEL_12_2";
	default:
		return "Unknown";
	}
}

ENGINE_API INLINE std::string ToString(const D3D_SHADER_MODEL ShaderModel)
{
	switch (ShaderModel)
	{
	case D3D_SHADER_MODEL_5_1: return "D3D_SHADER_MODEL_5_1";
	case D3D_SHADER_MODEL_6_0: return "D3D_SHADER_MODEL_6_0";
	case D3D_SHADER_MODEL_6_1: return "D3D_SHADER_MODEL_6_1";
	case D3D_SHADER_MODEL_6_2: return "D3D_SHADER_MODEL_6_2";
	case D3D_SHADER_MODEL_6_3: return "D3D_SHADER_MODEL_6_3";
	case D3D_SHADER_MODEL_6_4: return "D3D_SHADER_MODEL_6_4";
	case D3D_SHADER_MODEL_6_5: return "D3D_SHADER_MODEL_6_5";
	case D3D_SHADER_MODEL_6_6: return "D3D_SHADER_MODEL_6_6";
	case D3D_SHADER_MODEL_6_7: return "D3D_SHADER_MODEL_6_7";
	case D3D_SHADER_MODEL_6_8: return "D3D_SHADER_MODEL_6_8";
	case D3D_SHADER_MODEL_6_9: return "D3D_SHADER_MODEL_6_9";
	case D3D_SHADER_MODEL_NONE:
	default:
		return "D3D_SHADER_MODEL_NONE";
	}
}

ENGINE_API INLINE std::string D3D12ResultToString(const HRESULT Result)
{
	switch (Result)
	{
	case D3D12_ERROR_ADAPTER_NOT_FOUND: return "D3D12_ERROR_ADAPTER_NOT_FOUND";
	case D3D12_ERROR_DRIVER_VERSION_MISMATCH: return "D3D12_ERROR_DRIVER_VERSION_MISMATCH";
	case DXGI_ERROR_ACCESS_DENIED: return "DXGI_ERROR_ACCESS_DENIED";
	case DXGI_ERROR_ACCESS_LOST: return "DXGI_ERROR_ACCESS_LOST";
	case DXGI_ERROR_ALREADY_EXISTS: return "DXGI_ERROR_ALREADY_EXISTS";
	case DXGI_ERROR_CANNOT_PROTECT_CONTENT: return "DXGI_ERROR_CANNOT_PROTECT_CONTENT";
	case DXGI_ERROR_DEVICE_HUNG: return "DXGI_ERROR_DEVICE_HUNG";
	case DXGI_ERROR_DEVICE_REMOVED: return "DXGI_ERROR_DEVICE_REMOVED";
	case DXGI_ERROR_DEVICE_RESET: return "DXGI_ERROR_DEVICE_RESET";
	case DXGI_ERROR_DRIVER_INTERNAL_ERROR: return "DXGI_ERROR_DRIVER_INTERNAL_ERROR";
	case DXGI_ERROR_FRAME_STATISTICS_DISJOINT: return "DXGI_ERROR_FRAME_STATISTICS_DISJOINT";
	case DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE: return "DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE";
	case DXGI_ERROR_INVALID_CALL: return "DXGI_ERROR_INVALID_CALL";
	case DXGI_ERROR_MORE_DATA: return "DXGI_ERROR_MORE_DATA";
	case DXGI_ERROR_NAME_ALREADY_EXISTS: return "DXGI_ERROR_NAME_ALREADY_EXISTS";
	case DXGI_ERROR_NONEXCLUSIVE: return "DXGI_ERROR_NONEXCLUSIVE";
	case DXGI_ERROR_NOT_CURRENTLY_AVAILABLE: return "DXGI_ERROR_NOT_CURRENTLY_AVAILABLE";
	case DXGI_ERROR_NOT_FOUND: return "DXGI_ERROR_NOT_FOUND";
	case DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED: return "DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED";
	case DXGI_ERROR_REMOTE_OUTOFMEMORY: return "DXGI_ERROR_REMOTE_OUTOFMEMORY";
	case DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE: return "DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE";
	case DXGI_ERROR_SDK_COMPONENT_MISSING: return "DXGI_ERROR_SDK_COMPONENT_MISSING";
	case DXGI_ERROR_SESSION_DISCONNECTED: return "DXGI_ERROR_SESSION_DISCONNECTED";
	case DXGI_ERROR_UNSUPPORTED: return "DXGI_ERROR_UNSUPPORTED";
	case DXGI_ERROR_WAIT_TIMEOUT: return "DXGI_ERROR_WAIT_TIMEOUT";
	case DXGI_ERROR_WAS_STILL_DRAWING: return "DXGI_ERROR_WAS_STILL_DRAWING";
	case E_FAIL: return "E_FAIL";
	case E_INVALIDARG: return "E_INVALIDARG";
	case E_OUTOFMEMORY: return "E_OUTOFMEMORY";
	case E_NOTIMPL: return "E_NOTIMPL";
	case E_ABORT: return "E_ABORT";
	case E_ACCESSDENIED: return "E_ACCESSDENIED";
	case E_HANDLE: return "E_HANDLE";
	case E_NOINTERFACE: return "E_NOINTERFACE";
	case E_POINTER: return "E_POINTER";
	case E_UNEXPECTED: return "E_UNEXPECTED";
	case S_FALSE: return "S_FALSE";
	case S_OK: return "S_OK";
	default:
		return "Unknown";
	}
}
